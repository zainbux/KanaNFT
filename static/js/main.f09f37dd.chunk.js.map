{"version":3,"sources":["candy-machine.ts","connection.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","isSoldOut","isActive","goLiveDate","Date","getTime","endSettings","endSettingType","date","number","treasury","wallet","tokenMint","gatekeeper","whitelistMintSettings","hiddenSettings","price","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","mintOneToken","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","signers","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","sendTransactions","txs","map","t","shortenAddress","address","chars","slice","ms","SequenceType","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","catch","reason","StopOnFailure","all","getUnixTs","DEFAULT_TIMEOUT","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","error","simulateResult","simulateTransaction","logs","line","startsWith","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","onSignature","context","e","CTAButton","styled","Button","CounterText","MintButton","onMint","isMinting","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","isVerifying","setIsVerifying","setIsActive","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","disabled","onClick","variant","CircularProgress","toDate","onMount","completed","onComplete","renderer","renderCounter","days","hours","minutes","seconds","ConnectButton","WalletDialogButton","MintContainer","div","Home","props","balance","setBalance","setIsMinting","setItemsAvailable","setItemsRedeemed","setItemsRemaining","whitelistEnabled","setWhitelistEnabled","whitelistTokenBalance","setWhitelistTokenBalance","open","severity","alertState","setAlertState","useAnchorWallet","setCandyMachine","rpcUrl","rpcHost","refreshCandyMachineState","cndy","getTokenAccountBalance","tokenBalance","uiAmount","document","getElementById","click","mintTxId","txTimeout","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","toBase58","toLocaleString","signTransaction","clusterUrl","options","autoShowModal","Snackbar","autoHideDuration","onClose","Alert","process","network","Connection","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","fontSize","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","buyer"],"mappings":"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","file":"static/js/main.f09f37dd.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nimport { SystemProgram } from '@solana/web3.js';\nimport { sendTransactions } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\ninterface CandyMachineState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | [number, anchor.BN];\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = 'recent',\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachine> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive:\n        state.data.goLiveDate &&\n        state.data.goLiveDate.toNumber() < new Date().getTime() / 1000 &&\n        (state.endSettings\n          ? state.endSettings.endSettingType.date\n            ? state.endSettings.number.toNumber() > new Date().getTime() / 1000\n            : itemsRedeemed < state.endSettings.number.toNumber()\n          : true),\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachine,\n  payer: anchor.web3.PublicKey,\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}","import {\n    Keypair,\n    Commitment,\n    Connection,\n    RpcResponseAndContext,\n    SignatureStatus,\n    SimulatedTransactionResponse,\n    Transaction,\n    TransactionInstruction,\n    TransactionSignature,\n    Blockhash,\n    FeeCalculator,\n  } from '@solana/web3.js';\n  \n  import { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n  \n  interface BlockhashAndFeeCalculator {\n    blockhash: Blockhash;\n    feeCalculator: FeeCalculator;\n  }\n  \n  export const getErrorForTransaction = async (\n    connection: Connection,\n    txid: string,\n  ) => {\n    // wait for all confirmation before geting transaction\n    await connection.confirmTransaction(txid, 'max');\n  \n    const tx = await connection.getParsedConfirmedTransaction(txid);\n  \n    const errors: string[] = [];\n    if (tx?.meta && tx.meta.logMessages) {\n      tx.meta.logMessages.forEach(log => {\n        const regex = /Error: (.*)/gm;\n        let m;\n        while ((m = regex.exec(log)) !== null) {\n          // This is necessary to avoid infinite loops with zero-width matches\n          if (m.index === regex.lastIndex) {\n            regex.lastIndex++;\n          }\n  \n          if (m.length > 1) {\n            errors.push(m[1]);\n          }\n        }\n      });\n    }\n  \n    return errors;\n  };\n  \n  export enum SequenceType {\n    Sequential,\n    Parallel,\n    StopOnFailure,\n  }\n  \n  export async function sendTransactionsWithManualRetry(\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[][],\n    signers: Keypair[][],\n  ): Promise<(string | undefined)[]> {\n    let stopPoint = 0;\n    let tries = 0;\n    let lastInstructionsLength = null;\n    let toRemoveSigners: Record<number, boolean> = {};\n    instructions = instructions.filter((instr, i) => {\n      if (instr.length > 0) {\n        return true;\n      } else {\n        toRemoveSigners[i] = true;\n        return false;\n      }\n    });\n    let ids: string[] = [];\n    let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n  \n    while (stopPoint < instructions.length && tries < 3) {\n      instructions = instructions.slice(stopPoint, instructions.length);\n      filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n  \n      if (instructions.length === lastInstructionsLength) tries = tries + 1;\n      else tries = 0;\n  \n      try {\n        if (instructions.length === 1) {\n          const id = await sendTransactionWithRetry(\n            connection,\n            wallet,\n            instructions[0],\n            filteredSigners[0],\n            'single',\n          );\n          ids.push(id.txid);\n          stopPoint = 1;\n        } else {\n          const { txs } = await sendTransactions(\n            connection,\n            wallet,\n            instructions,\n            filteredSigners,\n            SequenceType.StopOnFailure,\n            'single',\n          );\n          ids = ids.concat(txs.map(t => t.txid));\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      console.log(\n        'Died on ',\n        stopPoint,\n        'retrying from instruction',\n        instructions[stopPoint],\n        'instructions length is',\n        instructions.length,\n      );\n      lastInstructionsLength = instructions.length;\n    }\n  \n    return ids;\n  }\n  \n  export const sendTransactions = async (\n    connection: Connection,\n    wallet: any,\n    instructionSet: TransactionInstruction[][],\n    signersSet: Keypair[][],\n    sequenceType: SequenceType = SequenceType.Parallel,\n    commitment: Commitment = 'singleGossip',\n    successCallback: (txid: string, ind: number) => void = (txid, ind) => { },\n    failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n    block?: BlockhashAndFeeCalculator,\n  ): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\n  \n    const unsignedTxns: Transaction[] = [];\n  \n    if (!block) {\n      block = await connection.getRecentBlockhash(commitment);\n    }\n  \n    for (let i = 0; i < instructionSet.length; i++) {\n      const instructions = instructionSet[i];\n      const signers = signersSet[i];\n  \n      if (instructions.length === 0) {\n        continue;\n      }\n  \n      let transaction = new Transaction();\n      instructions.forEach(instruction => transaction.add(instruction));\n      transaction.recentBlockhash = block.blockhash;\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n  \n      if (signers.length > 0) {\n        transaction.partialSign(...signers);\n      }\n  \n      unsignedTxns.push(transaction);\n    }\n  \n    const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n  \n    const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n  \n    let breakEarlyObject = { breakEarly: false, i: 0 };\n    console.log(\n      'Signed txns length',\n      signedTxns.length,\n      'vs handed in length',\n      instructionSet.length,\n    );\n    for (let i = 0; i < signedTxns.length; i++) {\n      const signedTxnPromise = sendSignedTransaction({\n        connection,\n        signedTransaction: signedTxns[i],\n      });\n  \n      signedTxnPromise\n        .then(({ txid, slot }) => {\n          successCallback(txid, i);\n        })\n        .catch(reason => {\n          // @ts-ignore\n          failCallback(signedTxns[i], i);\n          if (sequenceType === SequenceType.StopOnFailure) {\n            breakEarlyObject.breakEarly = true;\n            breakEarlyObject.i = i;\n          }\n        });\n  \n      if (sequenceType !== SequenceType.Parallel) {\n        try {\n          await signedTxnPromise;\n        } catch (e) {\n          console.log('Caught failure', e);\n          if (breakEarlyObject.breakEarly) {\n            console.log('Died on ', breakEarlyObject.i);\n            // Return the txn we failed on by index\n            return {\n              number: breakEarlyObject.i,\n              txs: await Promise.all(pendingTxns),\n            };\n          }\n        }\n      } else {\n        pendingTxns.push(signedTxnPromise);\n      }\n    }\n  \n    if (sequenceType !== SequenceType.Parallel) {\n      await Promise.all(pendingTxns);\n    }\n  \n    return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n  };\n  \n  export const sendTransaction = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[],\n    signers: Keypair[],\n    awaitConfirmation = true,\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n  ) => {\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\n  \n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n  \n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n  \n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  \n    const rawTransaction = transaction.serialize();\n    let options = {\n      skipPreflight: true,\n      commitment,\n    };\n  \n    const txid = await connection.sendRawTransaction(rawTransaction, options);\n    let slot = 0;\n  \n    if (awaitConfirmation) {\n      const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        DEFAULT_TIMEOUT,\n        connection,\n        commitment,\n      );\n  \n      if (!confirmation)\n        throw new Error('Timed out awaiting confirmation on transaction');\n      slot = confirmation?.slot || 0;\n  \n      if (confirmation?.err) {\n        const errors = await getErrorForTransaction(connection, txid);\n  \n        console.log(errors);\n        throw new Error(`Raw transaction ${txid} failed`);\n      }\n    }\n  \n    return { txid, slot };\n  };\n  \n  export const sendTransactionWithRetry = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[],\n    signers: Keypair[],\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n    beforeSend?: () => void,\n  ) => {\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\n  \n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n  \n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n  \n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  \n    if (beforeSend) {\n      beforeSend();\n    }\n  \n    const { txid, slot } = await sendSignedTransaction({\n      connection,\n      signedTransaction: transaction,\n    });\n  \n    return { txid, slot };\n  };\n  \n  export const getUnixTs = () => {\n    return new Date().getTime() / 1000;\n  };\n  \n  const DEFAULT_TIMEOUT = 15000;\n  \n  export async function sendSignedTransaction({\n    signedTransaction,\n    connection,\n    timeout = DEFAULT_TIMEOUT,\n  }: {\n    signedTransaction: Transaction;\n    connection: Connection;\n    sendingMessage?: string;\n    sentMessage?: string;\n    successMessage?: string;\n    timeout?: number;\n  }): Promise<{ txid: string; slot: number }> {\n    const rawTransaction = signedTransaction.serialize();\n    const startTime = getUnixTs();\n    let slot = 0;\n    const txid: TransactionSignature = await connection.sendRawTransaction(\n      rawTransaction,\n      {\n        skipPreflight: true,\n      },\n    );\n  \n    console.log('Started awaiting confirmation for', txid);\n  \n    let done = false;\n    (async () => {\n      while (!done && getUnixTs() - startTime < timeout) {\n        connection.sendRawTransaction(rawTransaction, {\n          skipPreflight: true,\n        });\n        await sleep(500);\n      }\n    })();\n    try {\n      const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        timeout,\n        connection,\n        'recent',\n        true,\n      );\n  \n      if (!confirmation)\n        throw new Error('Timed out awaiting confirmation on transaction');\n  \n      if (confirmation.err) {\n        console.error(confirmation.err);\n        throw new Error('Transaction failed: Custom instruction error');\n      }\n  \n      slot = confirmation?.slot || 0;\n    } catch (err: any) {\n      console.error('Timeout Error caught', err);\n      if (err.timeout) {\n        throw new Error('Timed out awaiting confirmation on transaction');\n      }\n      let simulateResult: SimulatedTransactionResponse | null = null;\n      try {\n        simulateResult = (\n          await simulateTransaction(connection, signedTransaction, 'single')\n        ).value;\n      } catch (e) { }\n      if (simulateResult && simulateResult.err) {\n        if (simulateResult.logs) {\n          for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n            const line = simulateResult.logs[i];\n            if (line.startsWith('Program log: ')) {\n              throw new Error(\n                'Transaction failed: ' + line.slice('Program log: '.length),\n              );\n            }\n          }\n        }\n        throw new Error(JSON.stringify(simulateResult.err));\n      }\n      // throw new Error('Transaction failed');\n    } finally {\n      done = true;\n    }\n  \n    console.log('Latency', txid, getUnixTs() - startTime);\n    return { txid, slot };\n  }\n  \n  async function simulateTransaction(\n    connection: Connection,\n    transaction: Transaction,\n    commitment: Commitment,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    // @ts-ignore\n    transaction.recentBlockhash = await connection._recentBlockhash(\n      // @ts-ignore\n      connection._disableBlockhashCaching,\n    );\n  \n    const signData = transaction.serializeMessage();\n    // @ts-ignore\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = { encoding: 'base64', commitment };\n    const args = [encodedTransaction, config];\n  \n    // @ts-ignore\n    const res = await connection._rpcRequest('simulateTransaction', args);\n    if (res.error) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n  \n  async function awaitTransactionSignatureConfirmation(\n    txid: TransactionSignature,\n    timeout: number,\n    connection: Connection,\n    commitment: Commitment = 'recent',\n    queryStatus = false,\n  ): Promise<SignatureStatus | null | void> {\n    let done = false;\n    let status: SignatureStatus | null | void = {\n      slot: 0,\n      confirmations: 0,\n      err: null,\n    };\n    let subId = 0;\n    status = await new Promise(async (resolve, reject) => {\n      setTimeout(() => {\n        if (done) {\n          return;\n        }\n        done = true;\n        console.log('Rejecting for timeout...');\n        reject({ timeout: true });\n      }, timeout);\n      try {\n        subId = connection.onSignature(\n          txid,\n          (result, context) => {\n            done = true;\n            status = {\n              err: result.err,\n              slot: context.slot,\n              confirmations: 0,\n            };\n            if (result.err) {\n              console.log('Rejected via websocket', result.err);\n              reject(status);\n            } else {\n              console.log('Resolved via websocket', result);\n              resolve(status);\n            }\n          },\n          commitment,\n        );\n      } catch (e) {\n        done = true;\n        console.error('WS error in setup', txid, e);\n      }\n      while (!done && queryStatus) {\n        // eslint-disable-next-line no-loop-func\n        (async () => {\n          try {\n            const signatureStatuses = await connection.getSignatureStatuses([\n              txid,\n            ]);\n            status = signatureStatuses && signatureStatuses.value[0];\n            if (!done) {\n              if (!status) {\n                console.log('REST null result for', txid, status);\n              } else if (status.err) {\n                console.log('REST error for', txid, status);\n                done = true;\n                reject(status.err);\n              } else if (!status.confirmations) {\n                console.log('REST no confirmations for', txid, status);\n              } else {\n                console.log('REST confirmation for', txid, status);\n                done = true;\n                resolve(status);\n              }\n            }\n          } catch (e) {\n            if (!done) {\n              console.log('REST connection error: txid', txid, e);\n            }\n          }\n        })();\n        await sleep(2000);\n      }\n    });\n  \n    //@ts-ignore\n    if (connection._signatureSubscriptions[subId])\n      connection.removeSignatureListener(subId);\n    done = true;\n    console.log('Returning status', status);\n    return status;\n  }\n  export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  ","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachine } from './candy-machine';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState } from 'react';\nimport Countdown from \"react-countdown\";\nimport {\n    toDate,\n} from './utils';\n\nexport const CTAButton = styled(Button)``; // add your styles here\n\nexport const CounterText = styled.span``; // add your styles here\n\nexport const MintButton = ({\n    onMint,\n    candyMachine,\n    isMinting,\n}: {\n    onMint: () => Promise<void>;\n    candyMachine: CandyMachine | undefined;\n    isMinting: boolean;\n}) => {\n    const { requestGatewayToken, gatewayStatus } = useGateway();\n    const [clicked, setClicked] = useState(false);\n    const [isVerifying, setIsVerifying] = useState(false);\n    const [isActive, setIsActive] = useState(false); // true when countdown completes\n\n    useEffect(() => {\n        setIsVerifying(false);\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\n            // when user approves wallet verification txn\n            setIsVerifying(true);\n        }\n        else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n            console.log('Verified human, now minting...');\n            onMint();\n            setClicked(false);\n        }\n    }, [gatewayStatus, clicked, setClicked, onMint]);\n\n    return (\n        <CTAButton\n            disabled={\n                candyMachine?.state.isSoldOut ||\n                isMinting ||\n                !isActive ||\n                isVerifying\n            }\n            onClick={async () => {\n                if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\n                    console.log('Requesting gateway token');\n                    setClicked(true);\n                    await requestGatewayToken();\n                } else {\n                    console.log('Minting...');\n                    await onMint();\n                }\n            }}\n            variant=\"contained\"\n        >\n            {!candyMachine ? (\n                \"CONNECTING...\"\n            ) : candyMachine?.state.isSoldOut ? (\n                'SOLD OUT'\n            ) : isActive ? (\n                isVerifying ? 'VERIFYING...' :\n                    isMinting ? (\n                        <CircularProgress />\n                    ) : (\n                        \"MINT\"\n                    )\n            ) : (candyMachine?.state.goLiveDate ? (\n                <Countdown\n                    date={toDate(candyMachine?.state.goLiveDate)}\n                    onMount={({ completed }) => completed && setIsActive(true)}\n                    onComplete={() => {\n                        setIsActive(true);\n                    }}\n                    renderer={renderCounter}\n                />\n            ) : (\n                \"UNAVAILABLE\"\n            ))}\n        </CTAButton>\n    );\n};\n\nconst renderCounter = ({ days, hours, minutes, seconds }: any) => {\n    return (\n        <CounterText>\n            {hours + (days || 0) * 24} hours, {minutes} minutes, {seconds} seconds\n        </CounterText>\n    );\n};","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL, PublicKey } from \"@solana/web3.js\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { MintButton } from './MintButton';\n\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n  CANDY_MACHINE_PROGRAM,\n} from \"./candy-machine\";\n\nimport {\n  AlertState,\n  getAtaForMint,\n} from \"./utils\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst MintContainer = styled.div``; // add your styles here\n\nexport interface HomeProps {\n  candyMachineId: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [itemsAvailable, setItemsAvailable] = useState(0);\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n  const [whitelistEnabled, setWhitelistEnabled] = useState(false);\n  const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  const rpcUrl = props.rpcHost;\n\n  const refreshCandyMachineState = () => {\n    (async () => {\n      console.log(\"refresh cm\");\n      if (!wallet) return;\n\n      const cndy = await getCandyMachineState(\n        wallet as anchor.Wallet,\n        props.candyMachineId,\n        props.connection\n      );\n\n      console.log(cndy);\n      setCandyMachine(cndy);\n\n      setItemsAvailable(cndy.state.itemsAvailable);\n      setItemsRemaining(cndy.state.itemsRemaining);\n      setItemsRedeemed(cndy.state.itemsRedeemed);\n\n      // fetch whitelist token balance\n      if (cndy.state.whitelistMintSettings) {\n        setWhitelistEnabled(true);\n        let balance = 0;\n        try {\n          const tokenBalance =\n            await props.connection.getTokenAccountBalance(\n              (\n                await getAtaForMint(\n                  cndy.state.whitelistMintSettings.mint,\n                  wallet.publicKey,\n                )\n              )[0],\n            );\n\n          balance = tokenBalance?.value?.uiAmount || 0;\n        }\n        catch (e) {\n          console.error(e);\n          balance = 0;\n        }\n\n        setWhitelistTokenBalance(balance);\n      }\n      else {\n        setWhitelistEnabled(false);\n      }\n    })();\n  };\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet && candyMachine?.program && wallet.publicKey) {\n        const mintTxId = (\n          await mintOneToken(candyMachine, wallet.publicKey)\n        )[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            'singleGossip',\n            true,\n          );\n        }\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction Timeout! Please try again.';\n        } else if (error.message.indexOf('0x138')) {\n        } else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n      setIsMinting(false);\n      refreshCandyMachineState();\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n\n  useEffect(refreshCandyMachineState, [\n    wallet,\n    props.candyMachineId,\n    props.connection,\n  ]);\n\n  return (\n    <main>\n      {wallet && (\n        <p>Wallet {shortenAddress(wallet.publicKey.toBase58() || \"\")}</p>\n      )}\n\n      {wallet && <p>Balance: {(balance || 0).toLocaleString()} SOL</p>}\n\n      {wallet && <p>Total Available: {itemsAvailable}</p>}\n\n      {wallet && <p>Redeemed: {itemsRedeemed}</p>}\n\n      {wallet && <p>Remaining: {itemsRemaining}</p>}\n\n      {wallet && whitelistEnabled && <p>Whitelist token balance: {whitelistTokenBalance}</p>}\n\n      {<MintContainer>\n        {!wallet ? (\n          <ConnectButton>Connect Wallet</ConnectButton>\n        ) :\n          candyMachine?.state.gatekeeper &&\n            wallet.publicKey &&\n            wallet.signTransaction ? (\n            <GatewayProvider\n              wallet={{\n                publicKey:\n                  wallet.publicKey ||\n                  new PublicKey(CANDY_MACHINE_PROGRAM),\n                //@ts-ignore\n                signTransaction: wallet.signTransaction,\n              }}\n              // // Replace with following when added\n              // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\n              gatekeeperNetwork={\n                candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n              } // This is the ignite (captcha) network\n              /// Don't need this for mainnet\n              clusterUrl={rpcUrl}\n              options={{ autoShowModal: false }}\n            >\n              <MintButton\n                candyMachine={candyMachine}\n                isMinting={isMinting}\n                onMint={onMint}\n              />\n            </GatewayProvider>\n          ) : (\n            <MintButton\n              candyMachine={candyMachine}\n              isMinting={isMinting}\n              onMint={onMint}\n            />\n          )}\n      </MintContainer>}\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </main>\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n                fontSize: '30px',\n                \n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n        getPhantomWallet(),\n        getSlopeWallet(),\n        getSolflareWallet(),\n        getSolletWallet({ network }),\n        getSolletExtensionWallet({ network })\n    ],\n    []\n  );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect={true}>\n            <WalletDialogProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                connection={connection}\n                txTimeout={txTimeout}\n                rpcHost={rpcHost}\n              />\n            </WalletDialogProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n"],"sourceRoot":""}